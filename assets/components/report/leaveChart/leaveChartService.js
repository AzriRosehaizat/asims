application.service('leaveChartService', function($mdDialog, _, moment, reportService) {

    var self = this;
    var docDefinition = {
        pageSize: 'LETTER',
        pageMargins: [60, 60, 40, 60],
        info: {
            title: 'Leave Entitlement Chart',
            author: 'Auto-generated by Application',
            subject: 'Leave Entitlement Chart',
        },
        content: [],
        defaultStyle: {
            font: Object.keys(pdfMake.fonts)[0],
            fontSize: 11
        },
        styles: reportService.setStyle()
    };

    self.openLoadDialog = function(ev, entity, tabs) {
        $mdDialog.show({
                controller: 'dialogController as ctrl',
                templateUrl: 'components/report/dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: {
                    title: "leave chart"
                },
                clickOutsideToClose: true
            })
            .then(function(range) {
                docDefinition.content = [];

                var data = formatData(entity, tabs, range);
                generateReport(data);
                openPdf();
            });
    };

    self.openChart = function(entity, tabs) {
        docDefinition.content = [];

        var data = formatData(entity, tabs);
        generateReport(data);
        openPdf();
    };

    function formatData(entity, tabs) {
        var data = {};

        /******************** Regular staff information ***********************/
        entity.name = entity.firstName + ' ' + entity.lastName;
        data.info = entity;

        /*************************** Data objects *****************************/
        var creditData = _.sortBy(tabs.credits.gridOptions.data, 'startDate');
        var debitData = _.sortBy(tabs.debits.gridOptions.data, 'startDate');

        /************************* Leaves taken table **************************/
        data.main = [];
        data.main.push(buildLeaveRow('LEAVES TAKEN', 'LEAVE PERIOD'));

        // Get leaves taken
        _.forEach(debitData, function(debit) {
            var taken = debit.leaveDebitType + ' leave';
            var wage = (debit.wagePercentage) ? ' at ' + debit.wagePercentage + '%' : '';
            var period = getPeriod(debit.startDate, debit.endDate) + wage;

            data.main.push(buildLeaveRow(taken, period));
        });

        /************** Credit toward next research/study leave ***************/
        data.RS = [];
        data.RS.push(buildCreditRow('PERIOD WORKED', 'CREDITS', 'BALANCE', 'NOTES'));

        var newCredits = getNewCredits(debitData, creditData, entity.researchBalance, 'Research');

        _.forEach(newCredits, function(credit) {
            var period = getPeriod(credit.startDate, credit.endDate);
            var notes = (credit.description) ? credit.description : '';

            data.RS.push(buildCreditRow(period, credit.amount, credit.balance, notes));
        });

        /************** Credit toward next administrative leave ***************/
        data.Admin = [];
        data.Admin.push(buildCreditRow('PERIOD WORKED', 'CREDITS', 'BALANCE', 'NOTES'));
        
        newCredits = getNewCredits(debitData, creditData, entity.administrativeBalance, 'Administrative');
        
        _.forEach(newCredits, function(credit) {
            var period = getPeriod(credit.startDate, credit.endDate);
            var notes = (credit.description) ? credit.description : '';

            data.Admin.push(buildCreditRow(period, credit.amount, credit.balance, notes));
        });

        return data;
    }

    function getPeriod(startDate, endDate) {
        var start = moment(startDate).format('MMM DD, YYYY'); // startDate is required
        var end = (endDate) ? moment(endDate).format('MMM DD, YYYY') : '';
        return start + '-' + end;
    }

    function getNewCredits(debit, credit, curBalance, type) {
        // Get the last research leave
        var lastDebit = _.findLast(debit, function(d) {
            return d.leaveDebitType === type;
        });
        
        var newCredits = _.filter(credit, function(c) {
            var isNew = (!lastDebit) || (c.startDate > lastDebit.startDate);
            return c.leaveCreditType === type && isNew;
        });
        
        var balance = curBalance;
        // Iterate newCredits from the end reducing balance
        _.forEachRight(newCredits, function(credit) {
            credit.balance = balance;
            balance -= credit.amount;
        });
        
        return newCredits;
    }

    function buildLeaveRow(leaveTaken, leavePeriod) {
        return {
            taken: leaveTaken,
            period: leavePeriod
        };
    }

    function buildCreditRow(period, credit, balance, notes) {
        return {
            period: period,
            credit: credit,
            balance: balance,
            notes: notes
        };
    }

    function generateReport(data) {
        docDefinition.content.push({
                text: 'HISTORY OF LEAVE ENTITLEMENT',
                style: 'header'
            },
            reportService.getStaffInfo(data.info),
            reportService.setTable(data.main, ['*', '*']), {
                text: "Credit Accumulated Toward Next Research/Study Leave",
                style: "tableHeader"
            },
            reportService.setTable(data.RS, ['auto', 'auto', 'auto', '*']), {
                text: "Credit Accumulated Toward Next Administrative Leave",
                style: "tableHeader"
            },
            reportService.setTable(data.Admin, ['auto', 'auto', 'auto', '*']), {
                text: '\nAs outlined by Clause 26.14, Members shall make application to the Chair by OCTOBER 1st for leaves commencing the following academic year. Please adhere to the deadline to ensure the Research/Study Leave Committee has sufficient time to consider your application.',
                style: 'tableHeader'
            }, {
                text: 'I HAVE READ THE ABOVE.',
                style: 'section'
            },
            reportService.setFooter()
        );
    }

    function openPdf() {
        pdfMake.createPdf(docDefinition).open();
    }
});